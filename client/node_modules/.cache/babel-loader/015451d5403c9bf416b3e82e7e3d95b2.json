{"ast":null,"code":"import { GET_POSTS, GET_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  post: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id === payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/New folder (2)/[FreeCourseSite.com] Udemy -MERN Stack Front To Back Full Stack React, Redux & Node.js/devconnector_S2/client/src/reducers/post.js"],"names":["GET_POSTS","GET_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","post","loading","error","state","action","type","payload","posts","filter","_id","map","id","likes","comments","comment"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,QAAlB,EAA4BC,UAA5B,EAAwCC,YAAxC,EAAsDC,WAAtD,EAAmEC,QAAnE,EAA6EC,WAA7E,EAA0FC,cAA1F,QAA+G,kBAA/G;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBA,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;AAOA,eAAe,UAASC,KAAK,GAAEJ,YAAhB,EAA8BK,MAA9B,EAAsC;AACjD,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBF,MAAxB;;AAEA,UAAOC,IAAP;AACI,SAAKd,SAAL;AACG,aAAO,EACH,GAAGY,KADA;AAEHI,QAAAA,KAAK,EAAED,OAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKH,SAAKT,QAAL;AACG,aAAO,EACH,GAAGW,KADA;AAEHH,QAAAA,IAAI,EAAEM,OAFH;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKH,SAAKL,QAAL;AACG,aAAO,EACH,GAAGO,KADA;AAEHI,QAAAA,KAAK,EAAE,CAACD,OAAD,EAAS,GAAGH,KAAK,CAACI,KAAlB,CAFJ;AAGHN,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKH,SAAKN,WAAL;AACG,aAAO,EACH,GAAGQ,KADA;AAEHI,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACS,GAAL,KAAaH,OAAxC,CAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKH,SAAKR,UAAL;AACG,aAAO,EACH,GAAGU,KADA;AAEHD,QAAAA,KAAK,EAAEI,OAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKH,SAAKP,YAAL;AACG,aAAO,EACF,GAAGS,KADD;AAEFI,QAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,CAAYG,GAAZ,CAAgBV,IAAI,IAAIA,IAAI,CAACS,GAAL,KAAaH,OAAO,CAACK,EAArB,GAA0B,EAAC,GAAGX,IAAJ;AAAUY,UAAAA,KAAK,EACpEN,OAAO,CAACM;AAD6C,SAA1B,GACTZ,IADf,CAFL;AAIFC,QAAAA,OAAO,EAAE;AAJP,OAAP;;AAMH,SAAKJ,WAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHH,QAAAA,IAAI,EAAE,EAAE,GAAGG,KAAK,CAACH,IAAX;AAAiBa,UAAAA,QAAQ,EAAEP;AAA3B,SAFH;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKH,cAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHH,QAAAA,IAAI,EAAE,EACF,GAAGG,KAAK,CAACH,IADP;AAEFa,UAAAA,QAAQ,EAAEV,KAAK,CAACH,IAAN,CAAWa,QAAX,CAAoBL,MAApB,CAA2BM,OAAO,IAAIA,OAAO,CAACL,GAAR,KAAgBH,OAAtD;AAFR,SAFH;AAMHL,QAAAA,OAAO,EAAE;AANN,OAAP;;AAQJ;AACI,aAAOE,KAAP;AAtDR;AAwDH","sourcesContent":["import {GET_POSTS,GET_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, ADD_COMMENT, REMOVE_COMMENT} from '../actions/types';\r\n\r\n\r\nconst initialState = {\r\n    post: [],\r\n    post: null,\r\n    loading: true,\r\n    error: {}\r\n}\r\n\r\nexport default function(state= initialState, action) {\r\n    const {type, payload} = action;\r\n\r\n    switch(type) {\r\n        case GET_POSTS:\r\n           return {\r\n               ...state,\r\n               posts: payload,\r\n               loading: false\r\n            };\r\n        case GET_POST:\r\n           return {\r\n               ...state,\r\n               post: payload,\r\n               loading: false\r\n            };\r\n        case ADD_POST:\r\n           return {\r\n               ...state,\r\n               posts: [payload,...state.posts],\r\n               loading: false\r\n            };\r\n        case DELETE_POST:\r\n           return {\r\n               ...state,\r\n               posts: state.posts.filter(post => post._id !== payload),\r\n               loading: false\r\n            };\r\n        case POST_ERROR:\r\n           return {\r\n               ...state,\r\n               error: payload,\r\n               loading: false\r\n            };\r\n        case UPDATE_LIKES:\r\n           return {\r\n                ...state,\r\n                posts: state.posts.map(post => post._id === payload.id ? {...post, likes: \r\n                    payload.likes } : post),\r\n                loading: false\r\n            };\r\n        case ADD_COMMENT:\r\n            return {\r\n                ...state,\r\n                post: { ...state.post, comments: payload },\r\n                loading: false\r\n            };\r\n        case REMOVE_COMMENT:\r\n            return {\r\n                ...state,\r\n                post: { \r\n                    ...state.post, \r\n                    comments: state.post.comments.filter(comment => comment._id === payload) \r\n                },\r\n                loading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}